version: '3.8'

services:
  app1:
    build: .
    container_name: moonshot_app1
    ports:
      - "4000:4000"
    environment:
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: moonshot_db
      AWS_REGION: eu-north-1
      AWS_SDK_LOAD_CONFIG: "1"
    volumes:
      - ~/.aws:/root/.aws:ro
    depends_on:
      db:
        condition: service_healthy

  app2:
    build: .
    container_name: moonshot_app2
    ports:
      - "4001:4000"
    environment:
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: moonshot_db
      AWS_REGION: eu-north-1
      AWS_SDK_LOAD_CONFIG: "1"
    volumes:
      - ~/.aws:/root/.aws:ro
    depends_on:
      db:
        condition: service_healthy

  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: moonshot_frontend
    ports:
      - "3000:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - app1

  db:
    image: postgres:14
    container_name: moonshot_db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: moonshot_db
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  test-runner:
    build: .
    container_name: moonshot_test_runner
    command: ["npm", "run", "test"]
    environment:
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: moonshot_db
      AWS_REGION: eu-north-1
      AWS_SDK_LOAD_CONFIG: "1"
    volumes:
      - ~/.aws:/root/.aws:ro
    depends_on:
      db:
        condition: service_healthy

volumes:
  pgdata: